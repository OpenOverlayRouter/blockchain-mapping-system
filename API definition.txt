#####################
#p2p
#####################


block get_block()
#returns a new block or None if there is no data

transaction get_tx()
#returns a new transaction or None if there is no data

broadcast_block(block bl)
#sends a new block to the network

broadcast_tx(transaction tx)
#send a new transaction to the network


#####################
#consensus
#####################

signer get_next_signer()
#returns the next IP that has to sign a block

calculate_next_signer(myIPs ip)
#calculates the next IP that will sign a block. It is stored in an internal variable that get_next_signer() uses
#myIPs is the set of IPs owned by the node, updated each time a block is added
#if myIPs is None, means that it the previous block was incorrect

signer amIsigner(myIPs ip)
#returns a sign object that says if the node has to sign

block get_solid_block()
#returns a definitve block to be added to the chain, or None if there is no data

store_block(block bl)
#adds a block to the structure that handles forks


string get_last_block_hash()
#returns the hash of the block in the tip of the chain
#used when creating a new block


#####################
#chain
##################### 

add_pending_transaction (transaction tx)
#returns True if the transaction is correct, False otherwise
#adds a transaction to the pool of unconfirmed transactions

add_block (block bl)
#adds a new block to the chain. DOES NOT CHECK if the block is correct
#returns True if the block is correct, False otherwise
#Internally, checks the block signature and ALL transactions


create_block(signer sig, string last_block_hash)
#Creates and signs a new block with the IP in sig and the  
#hash of the previous block as last_block_hash

info query_eid(query q)
#returns an RLOC record or a MS list corresponding to the EID in q

verify_block_signature(block bl, ip_addres ip)
#Returns True if the block bl is signed with the key associated with ip address ip, False otherwise

#####################
#user
##################### 

transaction get_tx()
#returns a new transaction submitted by the user or None if there is no data

#####################
#oor
##################### 
get_query(query q)
#returns an EID query from OOR or None if there is no data

send(info i)
#writes the RLOC record or MS list to the OOR socket


#data objects

block
signer: IP that has to sign the new block
transaction
        tx: the transaction
	more: true if the buffer has more transactions
sign
	me: True if the node has to sign
        signer: IP that has to sign the new block
myIPs: set of IPs owned by the node

