#####################
#p2p
#####################


block get_block()
#returns a new block or None if there is no data

transaction get_tx()
#returns a new transaction or None if there is no data

broadcast_block(block bl)
#sends a new block to the network

broadcast_tx(transaction tx)
#send a new transaction to the network

block_numbers get_block_queries()
#returns a list of block numbers queried by the network or None if no queries are pending

transaction tx_pool_query()
#returns True if the network requests the transaction pool, False otherwise

answer_block_queries(blocks bls)
#list of the blocks asked from the network

answer_tx_pool_query(transactions txs)
#response with transactions in the transaction pool (to send to the network)


#####################
#consensus
#####################

signer get_next_signer()
#returns the next IP that has to sign a block

calculate_next_signer(myIPs ip, timestamp t)
#calculates the next IP that will sign a block. It is stored in an internal variable that get_next_signer() uses
#myIPs is the set of IPs owned by the node, updated each time a block is added
#timestamp is the timestamp of the last block added to the chain, used to randomly select the new signer

signer, me amIsigner(myIPs ip)
#returns the following two variables:
#	me: True if the node has to sign the new block
#       signer: IP that has to sign the new block


#####################
#chain
##################### 

add_pending_transaction (transaction tx)
#adds a transaction to the pool of unconfirmed transactions
#raises an exception if there is an error

add_block (block bl)
#adds a new block to the chain. DOES NOT CHECK if the block signature is correct
#Internally, checks ALL transactions
#raises an exception if there is an error

block create_block(signer sig)
#Creates and signs a new block with the IP in sig 
#returns the new block but does not add it to the chain

info query_eid(query q)
#returns an RLOC record or a MS list corresponding to the EID in q

verify_block_signature(block bl, ip_addres ip)
#Returns True if the block bl is signed with the key associated with ip address ip, False otherwise

block get_block(block_number num)
#returns the block with number num

transactions get_transaction_pool()
#returns the transactions in the pool of pending transactions

block get_head_block()
#returns the last block of the chain

#####################
#user
##################### 

transaction get_tx()
#returns a new transaction submitted by the user or None if there is no data

#####################
#oor
##################### 
get_query(query q)
#returns an EID query from OOR or None if there is no data

send(info i)
#writes the RLOC record or MS list to the OOR socket


#data objects

block
signer: IP that has to sign the new block
transaction
myIPs: Two python lists of IP addresses owned by the node (one for IPv4, one for IPv6)

